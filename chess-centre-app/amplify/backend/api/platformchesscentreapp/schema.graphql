type Result @model @auth(rules: [{allow: private}]) @key(name: "byEvent", fields: ["eventID"]) {
  id: ID!
  pairings: AWSJSON
  results: AWSJSON
  players: AWSJSON
  eventID: ID
}

type Game @model @key(name: "byMember", fields: ["memberID"]) @key(name: "byEvent", fields: ["eventID"]) @auth(rules: [{allow: private}]) {
  id: ID!
  pgn: String
  memberID: ID
  eventID: ID
  opponent: String
  colour: String
  result: String
}

type Plan @model @auth(rules: [{allow: private}, {allow: private, provider: iam}]) @key(name: "key", fields: ["key"]) {
  id: ID!
  key: String!
  stripePriceId: String!
  stripeProductId: String!
}

type EventType @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  description: String
  url: String
  color: String
  time: String
  maxEntries: Int
  stripePriceId: String @auth(rules: [{allow: private, operations: [read]}])
  timeControl: String
  eventType: String
  defaultPrice: String
  canRegister: Boolean
}

type Member @model @auth(rules: [{allow: private, provider: iam}, {allow: owner, ownerField: "id", operations: [read, update]}, {allow: private, operations: [read]}]) @key(name: "stripe", fields: ["stripeCustomerId"]) {
  id: ID!
  about: String
  fideId: Int
  ecfId: String
  username: String
  name: String
  email: String
  entries: [Entry!] @connection(keyName: "byMember", fields: ["id"])
  stripeCustomerId: ID @auth(rules: [{allow: owner, ownerField: "id", operations: [read]}, {allow: private, operations: [read]}, {allow: private, provider: iam}])
  stripeCurrentPeriodEnd: Float @auth(rules: [{allow: owner, ownerField: "id", operations: [read]}, {allow: private, operations: [read]}, {allow: private, provider: iam}])
  stripePriceId: ID @auth(rules: [{allow: owner, ownerField: "id", operations: [read]}, {allow: private, operations: [read]}, {allow: private, provider: iam}])
  stripeProductId: ID @auth(rules: [{allow: owner, ownerField: "id", operations: [read]}, {allow: private, operations: [read]}, {allow: private, provider: iam}])
  ecfRating: String
  membershipType: String
  games: [Game] @connection(keyName: "byMember", fields: ["id"])
  gameInfo: AWSJSON
  ratingInfo: AWSJSON
}

type Event @model @auth(rules: [{allow: private}, {allow: private, provider: iam}]) @key(name: "eventsByStartDate", fields: ["startDate", "name"], queryField: "eventsByStartDate") {
  id: ID!
  name: String
  description: String
  rounds: Int
  time: String
  type: EventType! @connection
  startDate: AWSDate!
  endDate: AWSDate
  entries: [Entry!] @connection(keyName: "byEvent", fields: ["id"])
  maxEntries: Int
  entryCount: Int
  games: [Game] @connection(keyName: "byEvent", fields: ["id"])
  complete: Boolean
  cancelled: Boolean
  results: [Result] @connection(keyName: "byEvent", fields: ["id"])
}

type Entry @model @auth(rules: [{allow: private}, {allow: private, provider: iam}]) @key(name: "byEvent", fields: ["eventId"]) @key(name: "byMember", fields: ["memberId"]) {
  id: ID!
  eventId: ID!
  memberId: ID!
  event: Event @connection(fields: ["eventId"])
  member: Member @connection(fields: ["memberId"])
}
 